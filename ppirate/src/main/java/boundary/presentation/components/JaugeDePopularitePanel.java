/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package boundary.presentation.components;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;


/**
 *
 * @author ember
 */
public class JaugeDePopularitePanel extends javax.swing.JPanel {
    
    private NiveauPopularite niveau;
    
    public enum NiveauPopularite {
        NIVEAU0(new Color(46, 204, 113), "Pirate inconnu"),
        NIVEAU1(new Color(241, 196, 15), "Pirate débutant"),
        NIVEAU2(new Color(230, 126, 34), "Pirate niv. 2"),
        NIVEAU3(new Color(231, 76, 60), "Pirate niv. 3"),
        NIVEAU4(new Color(192, 57, 43), "Pirate niv. 4"),
        NIVEAU5(new Color(44, 62, 80), "Roi des mers");

        public final int niveau;
        public final int pourcentage;
        public final Color color;
        public final String nom_niveau;

        private NiveauPopularite(Color color, String nom_niveau) {
            this.niveau = this.ordinal();
            this.pourcentage = niveau == 0 ? 10 : niveau * 20;
            this.color = color;
            this.nom_niveau = nom_niveau;
        }

        public NiveauPopularite next() {
            if (niveau < values().length - 1) {
                return values()[niveau + 1];
            } else {
                return this; // NIVEAU5 next => NIVEAU5
            }
        }

        @Override
        public String toString() {
            return "Niveau Popularité " + niveau;
        }
    }

    /**
     * Creates new form JaugeDePopularitePanel
     */
    public JaugeDePopularitePanel() {
        this.niveau = NiveauPopularite.NIVEAU0;
        initComponents();
    }
    
    public void setNiveau(NiveauPopularite newNiveau) {
        this.niveau = newNiveau;
        repaint();
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        
        int width = getWidth();
        int height = getHeight();
        // espace de 3 (margin)
        int mintaille = Math.min(width, height) - 3; // meilleur cas : width=height (selon les layouts de la fenêtre)
        int x = (width - mintaille) / 2;  // supposé être 0 si meilleur cas
        int y = (height - mintaille) / 2; // supposé être 0 si meilleur cas
        
        // rendu lisse
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        drawJaugeVide(g2, x, y, mintaille);
        drawJaugeRempli(g2, x, y, mintaille);
        drawNomNiveau(g2, width, height);
    }
    
    public void drawJaugeVide(Graphics2D g2, int x, int y, int taille) {
        // fond du cercle même couleur mais alpha = 100 opacité réduites
        g2.setColor(new Color(niveau.color.getRed(), niveau.color.getGreen(), niveau.color.getBlue(), 100));
        g2.fillOval(x, y, taille, taille);
    }
    
    public void drawJaugeRempli(Graphics2D g2, int x, int y, int taille) {
        g2.setColor(niveau.color);
        g2.fillArc(x, y, taille, taille, 90, -360 * niveau.pourcentage / 100);
    }
    
    public void drawNomNiveau(Graphics2D g2, int width, int height) {
        // texte niveau de popularité
        g2.setColor(Color.WHITE);
        g2.setFont(new Font("Papyrus", Font.BOLD, 14));
        // position width/2 fait démarrer le texte pile au milieu du panel, donc
        // le texte semble être à droite
        // on retranche la taille du mot (évalué par FontMetrics) divisé par 2
        // pour la height on doit se placer au milieu de la hauteur du texte, 
        // par défaut on est en haut à droite du texte donc pas aligné verticalement
        FontMetrics fm = g2.getFontMetrics();
        g2.drawString(niveau.nom_niveau,
                width/2 - fm.stringWidth(niveau.nom_niveau)/2,
                (height + fm.getAscent() / 2) / 2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(100, 100));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
