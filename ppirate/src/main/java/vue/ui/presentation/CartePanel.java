/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vue.ui.presentation;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.PointerInfo;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import util.EnumCarte;
import vue.ui.dialog.MainDialog;

/**
 *
 * @author Antoine, Mathéo, Solène
 */
public class CartePanel extends javax.swing.JPanel {
    
    //Attributs pour l'IHM
    private MainDialog dialog;
    private JPanel ancienParent;
    private Plateau plateau;
    private JPanel glassPane;
    private int idCarte;
    private EnumCarte type;
    private String nom;
    private String description;
    private int pointPopularite;
    private int selfDegat;
    private int actionVie;
    
    
    
    /**
     * Creates new form CartePanel
     * @param carte
     * @param interactif
     */
    public CartePanel(boolean interactif, MainDialog dialog) {
        this.dialog = dialog;
        initComponents();
        initUI();
        this.setSize(new java.awt.Dimension(100, 250));
        if (!interactif) {
            removeInteractivity();
        }
        this.dialog.updateNbCartes();
    }
    
    public void initUI() {
        String htmlDescription = "<html><body style='width:58px;text-align:center'>" + nom + "</body></html>";
        NomCarteLabel.setText(htmlDescription);
        switch (type) {
            case EnumCarte.POPULARITE -> {
                Effet1Label.setText("Point de pop : " + pointPopularite);
                Effet2Label.setText("Self dégat : \n" + String.valueOf(selfDegat));
            }
            case EnumCarte.ATTAQUE -> {
                Effet1Label.setText("Action Vie : \n" + String.valueOf(actionVie));
                Effet2Label.setText("Self dégat : \n" + String.valueOf(selfDegat));
            }
            case EnumCarte.PROTECTION -> {
                Effet1Label.setText("L'effet de cette carte protection est");
            }
            case EnumCarte.VOL -> {
                
            }
            default -> {
                Effet1Label.setText("");
                Effet2Label.setText("");
            }
        }
    }
    
    private void removeInteractivity() {
        for (java.awt.event.MouseMotionListener mml : this.getMouseMotionListeners()) {
            this.removeMouseMotionListener(mml);
        }
        for (java.awt.event.MouseListener ml : this.getMouseListeners()) {
            this.removeMouseListener(ml);
        }
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        //super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g.create();
        
        g2d.setColor(Color.WHITE);
        g2d.fillRoundRect(0,0,getWidth(),getHeight(),20,20);
        
        switch (type) {
            case EnumCarte.POPULARITE -> {
                g2d.setColor(new Color(74,240,74)); //vert
            }
            case EnumCarte.ATTAQUE -> {
                g2d.setColor(new Color(240,74,74)); //rouge
            }
            case EnumCarte.PROTECTION -> {
                g2d.setColor(new Color(74,74,240)); //bleu
            }
            case EnumCarte.VOL -> {
                g2d.setColor(Color.BLACK);
            }
            default -> {
                System.err.println("Le type n'est pas connu");
            }
        }
        
        g2d.setStroke(new BasicStroke(4,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND));
        g2d.drawRoundRect(0,0,getWidth(),getHeight(),20,20);        
    }
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        NomCarteLabel = new javax.swing.JLabel();
        Effet1Label = new javax.swing.JLabel();
        Effet2Label = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(80, 120));
        setPreferredSize(new java.awt.Dimension(100, 120));
        setRequestFocusEnabled(false);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        NomCarteLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NomCarteLabel.setText("Nom Carte");
        NomCarteLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        add(NomCarteLabel);

        Effet1Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Effet1Label.setText("Effet1");
        add(Effet1Label);

        Effet2Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Effet2Label.setText("Effet2");
        add(Effet2Label);
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // récupération du plateau
        this.plateau=(Plateau) SwingUtilities.getWindowAncestor(this);
        this.glassPane = (JPanel) plateau.getGlassPane();
        this.glassPane.setVisible(true);
        
        plateau.setDescription(nom,description);
        
        ancienParent=(JPanel) this.getParent();        
        
        //récupération de la position absolue de la souris
        PointerInfo pointerInfo=MouseInfo.getPointerInfo();
        Point cursorLocation=pointerInfo.getLocation();
        SwingUtilities.convertPointFromScreen(cursorLocation, glassPane);
        
        //on enlève la carte de la main du joueur
        ancienParent.remove(this);
        ancienParent.revalidate();
        ancienParent.repaint();
        
        //et on l'ajoute au glassPane
        glassPane.add(this);
        this.setLocation(cursorLocation.x - getWidth()/2,cursorLocation.y - getHeight()/2);
        glassPane.revalidate();
        glassPane.repaint();
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        //récupération de la cible
        JPanel ciblePanel=null;

        if (ancienParent == plateau.getMainJoueurPanel1()) {
            ciblePanel = plateau.getZonePopulariteJoueur1();
        }
        if (ancienParent == plateau.getMainJoueurPanel2()) {
            ciblePanel = plateau.getZonePopulariteJoueur2();
        }
        
        //récupération de la position absolue de la souris
        // PointerInfo pointerInfo = MouseInfo.getPointerInfo();
        // Point cursorLocation = pointerInfo.getLocation();
        // Point cible = SwingUtilities.convertPoint(glassPane, cursorLocation, ciblePanel);

        Point cursorLocation = MouseInfo.getPointerInfo().getLocation();
        SwingUtilities.convertPointFromScreen(cursorLocation, ciblePanel);
        
        //on enlève la carte du glassPane
        glassPane.remove(this);
        glassPane.revalidate();
        glassPane.repaint();
        
        //si la carte est amenée sur la cible on la pose
        if (ciblePanel != null && ciblePanel.contains(cursorLocation)) { 
            dialog.getPlateau().getTimerPanel().stop();
            ciblePanel.add(this);
            ciblePanel.revalidate();
            ciblePanel.repaint();
            
            // Logique du jeu 
            
            dialog.handleDeposerCarte(idCarte);
            dialog.updateCarteZonePopularite();
            System.out.println("Une carte a été choisie.");
            dialog.handleRemoveCarteMainJoueur(idCarte);
            dialog.updateMainJoueur();
            System.out.println("Carte supprimé du joueur courant.");
            dialog.handleAppliquerEffetCarte(idCarte);
            dialog.updateJaugeVie();
            dialog.updatePopularite();
            System.out.println("On applique les effets de la carte choisie");
            
            System.out.println("PV JOUEUR1 = " + dialog.getAdaptateurNoyau().getControlJeu().getPointDeVieJ1());
            
            if (dialog.handleVerifierFinDePartie()) {
                System.out.println("j'ai fini le jeu");
                dialog.stopTimer();
                // TODO fin du jeu
            } else {
                dialog.handleJoueurPioche();
                dialog.updateMainJoueur();
                dialog.updateNbCartes();
                System.out.println("On pioche une nouvelle carte.");

                dialog.handleChangerJoueur();
                System.out.println("On change de joueur.\n");
                dialog.updatePlateau();
                dialog.restartTimer();
            }            
        }
        else { //sinon on la remet dans la main du joueur
            System.out.println("Problème de cible.");
            ancienParent.add(this);  // ← remettre dans la main
            ancienParent.revalidate();       // ← recalcul du layout
            ancienParent.repaint();
        }
    }//GEN-LAST:event_formMouseReleased

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        //récupération de la position absolue de la sourie par rapport à l'écran
        PointerInfo pointerInfo=MouseInfo.getPointerInfo();
        Point cursorLocation=pointerInfo.getLocation();
        SwingUtilities.convertPointFromScreen(cursorLocation,glassPane);
        int x= cursorLocation.x;
        int y= cursorLocation.y;
        
        //déplacer la carte et la centrer sur le curseur
        this.setLocation(x - this.getWidth()/2,y - this.getHeight()/2);
        glassPane.repaint();
    }//GEN-LAST:event_formMouseDragged

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Effet1Label;
    private javax.swing.JLabel Effet2Label;
    private javax.swing.JLabel NomCarteLabel;
    // End of variables declaration//GEN-END:variables
}
