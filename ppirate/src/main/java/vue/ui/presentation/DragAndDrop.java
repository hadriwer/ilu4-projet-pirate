/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vue.ui.presentation;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

/**
 *
 * @author matheo
 */
public class DragAndDrop extends javax.swing.JPanel {

    /**
     * Creates new form DragAndDrop
     */
    private final Plateau plateau;
    private CartePanel carteEnCours;
    private Point offset;
    private Container ancienParent;
    private Point positionRelative;

    public DragAndDrop(Plateau plateau) {
        this.plateau = plateau;
        setOpaque(false);
        setLayout(null);
        setVisible(true);

        // Empêche de bloquer les events en général
        enableEvents(AWTEvent.MOUSE_EVENT_MASK | AWTEvent.MOUSE_MOTION_EVENT_MASK);
    }

    @Override
    protected void processMouseEvent(MouseEvent e) {
        if (carteEnCours != null) {
            if (e.getID() == MouseEvent.MOUSE_RELEASED) {
                dropCarte(e.getPoint());
            }
        } else {
            // Redispatch event vers la vraie cible
            redispatchMouseEvent(e);
        }
    }

    @Override
    protected void processMouseMotionEvent(MouseEvent e) {
        if (carteEnCours != null) {
            if (e.getID() == MouseEvent.MOUSE_DRAGGED) {
                int x = e.getX() - offset.x;
                int y = e.getY() - offset.y;
                carteEnCours.setLocation(x, y);
                repaint();
            }
        } else {
            // Redispatch event vers la vraie cible
            redispatchMouseEvent(e);
        }
    }

    private void redispatchMouseEvent(MouseEvent e) {
        // Transformer les coordonnées pour trouver le composant cible
        Component comp = plateau.getContentPane().findComponentAt(e.getPoint());
        if (comp != null && comp != this) {
            Point compPoint = SwingUtilities.convertPoint(this, e.getPoint(), comp);
            comp.dispatchEvent(new MouseEvent(comp, e.getID(), e.getWhen(), e.getModifiersEx(), 
                                              compPoint.x, compPoint.y, e.getClickCount(), e.isPopupTrigger(), e.getButton()));
        }
    }

    public void startDrag(CartePanel carte, Point startPoint) {
        this.carteEnCours = carte;
        this.offset = startPoint;

        ancienParent = carte.getParent();
        positionRelative = carte.getLocation();

        Point globalPosition = SwingUtilities.convertPoint(carte.getParent(), carte.getLocation(), this);

        ancienParent.remove(carte);
        this.add(carte);
        carte.setBounds(globalPosition.x, globalPosition.y, carte.getWidth(), carte.getHeight());

        this.revalidate();
        this.repaint();
    }

    private void dropCarte(Point pointRelachee) {
        JPanel ciblePanel;

        if (ancienParent == plateau.getMainJoueurPanel1()) {
            ciblePanel = plateau.getZonePopularitePanel2();
        } else if (ancienParent == plateau.getMainJoueurPanel2()) {
            ciblePanel = plateau.getZonePopularitePanel1();
        } else {
            ciblePanel = null;
        }

        if (ciblePanel != null) {
            Point cible = SwingUtilities.convertPoint(this, pointRelachee, ciblePanel);
            if (ciblePanel.getBounds().contains(cible)) {
                this.remove(carteEnCours);
                carteEnCours.setLocation(cible.x - offset.x, cible.y - offset.y);
                ciblePanel.add(carteEnCours);
                ciblePanel.revalidate();
                ciblePanel.repaint();
            } else {
                this.remove(carteEnCours);
                ancienParent.add(carteEnCours);  // ← remettre dans la main
                ancienParent.revalidate();       // ← recalcul du layout
                ancienParent.repaint(); 
            }
        }

        carteEnCours = null;
        repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
